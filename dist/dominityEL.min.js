class DominityElement {
  constructor(e) {
    if (
      (typeof e === 'string'
        ? (this.elem = document.querySelector(e))
        : (this.elem = e),
      this.elem == null)
    ) {
      console.error(`DominityError: element of query '${e}'  NOT  FOUND `);
      return;
    }
    (this.dominityElem = !0),
      (this.tag = this.elem.tagName),
      (this.template = !1);
  }
  text(e = null) {
    return e == null
      ? this.elem.textContent
      : (this.template ||= e,
        (this.elem.textContent = e),
        this);
  }
  reactTo(...e) {
    let t = this.html();
    return (
      e.forEach((e) => {
        e.subscribe((i) => {
          typeof i.value !== 'object'
            ? this.text(t.replace(RegExp(`{{${  e.name  }}}`, 'gi'), i.value))
            : Object.keys(i.value).forEach((s) => {
                this.html(
                  t.replace(
                    RegExp(`{{${  e.name  }.${  s  }}}`, 'gi'),
                    i.value[s],
                  ),
                ),
                  (t = this.html());
              });
        }),
          e.update();
      }),
      this
    );
  }
  html(e = null) {
    return e == null ? this.elem.innerHTML : ((this.elem.innerHTML = e), this);
  }
  style(e, t = null) {
    return typeof e === 'string'
      ? t == null
        ? window.getComputedStyle(this.elem, null).getPropertyValue(e)
        : ((this.elem.style[e] = t), this)
      : typeof e === 'object'
        ? (Object.assign(this.elem.style, e), this)
        : void 0;
  }
  class() {
    return (
      Array.from(arguments).forEach((e) => {
        this.elem.classList.add(e);
      }),
      this
    );
  }
  removeClass() {
    return (
      Array.from(arguments).forEach((e) => {
        this.elem.classList.remove(e);
      }),
      this
    );
  }
  toggleClass() {
    return (
      Array.from(arguments).forEach((e) => {
        this.elem.classList.toggle(e);
      }),
      this
    );
  }
  bindClass(e, t, i = '', s = (e) => e) {
    return (
      e instanceof DominityReactive
        ? e.subscribe((e) => {
            this.bindClass(s(e.value), t);
          })
        : e
          ? (this.class(t), i != '' && this.hasClass(i) && this.removeClass(i))
          : (this.removeClass(t), i != '' && this.class(i)),
      this
    );
  }
  hasClass(e) {
    return this.elem.classList.contains(e);
  }
  attr(e, t = null) {
    if (typeof e === 'string')
      {return t == null
        ? this.elem.getAttribute(e)
        : (this.elem.setAttribute(e, t), this);}
    if (typeof e === 'object') {
      const i = Object.keys(e),
        s = Object.values(e);
      return (
        i.forEach((e, t) => {
          this.attr(e, s[t]);
        }),
        this
      );
    }
  }
  hasAttr(e = null) {
    return e != null
      ? this.elem.hasAttribute(e)
      : e == null
        ? this.elem.hasAttributes()
        : void 0;
  }
  removeAttr() {
    Array.from(arguments).forEach((e) => {
      this.elem.removeAttribute(e);
    });
  }
  toggleAttr(e, t = '') {
    return this.hasAttr(e) ? this.removeAttr(e) : this.attr(e, t), this;
  }
  value(e = null) {
    if (e == null) {return this.elem.value;}
    this.elem.value = e;
  }
  checkFor(e, t, i) {
    return this.elem.addEventListener(e, t, i), this;
  }
  stopCheckFor(e, t, i) {
    return this.elem.removeEventListener(e, t, i), this;
  }
  causeEvent(e) {
    return this.elem.dispatchEvent(e), this;
  }
  causeCustomEvent(e, t = {}) {
    return this.causeEvent(new CustomEvent(e, { detail: t })), this;
  }
  onClick(e) {
    return (
      this.checkFor('click', (t) => {
        e(this, t);
      }),
      this
    );
  }
  enableHold(e = 0.5) {
    this.isHolding = !1;
    const t = this;
    function i(i) {
      (this.isHolding = !0),
        (this.timeout = setTimeout((e) => {
          this.isHolding &&
            t.causeEvent(new CustomEvent('hold', { details: e }));
        }, 1e3 * e));
    }
    function s(e) {
      (this.isHolding = !1), clearTimeout(this.timeout);
    }
    return (
      this.checkFor('mousedown', i),
      this.checkFor('touchstart', i),
      this.checkFor('mouseup', s),
      this.checkFor('touchend', s),
      this
    );
  }
  addTo(e) {
    return e.dominityElem ? e.addChild(this) : e.appendChild(this.elem), this;
  }
  insertTo(e, t) {
    e != null &&
      (e.dominityElem
        ? e.insertChild(t, this.elem)
        : e.insertAdjacentElement(t, this.elem));
  }
  remove() {
    return this.elem.remove(), this;
  }
  _el(e, t = '', i = {}) {
    const s = e.dominityElem ? e : this.create(e);
    return (
      e.dominityElem || this.addChild(s),
      typeof t === 'object' ? s.attr(t) : s.text(t).attr(i),
      s
    );
  }
  create(e) {
    return (
      (this.addedChild = el(e)), this.addChild(this.addedChild), this.addedChild
    );
  }
  addChild() {
    return (
      Array.from(arguments).forEach((e) => {
        e.dominityElem
          ? this.elem.appendChild(e.elem)
          : this.elem.appendChild(e);
      }),
      this
    );
  }
  insertChild(e, t) {
    return this.elem.insertAdjacentElement(e, t), this;
  }
  removeChild() {
    return (
      Array.from(arguments).forEach((e) => {
        this.elem.removeChild(this.elem.childNodes[e]);
      }),
      this
    );
  }
  replaceChild(e, t) {
    return this.elem.replaceChild(t, e), this;
  }
  $_el(e) {
    return new DominityElement(this.elem.querySelector(e));
  }
  $$_el(e) {
    return Array.from(this.elem.querySelectorAll(e)).map(
      (e) => new DominityElement(e),
    );
  }
  child(e) {
    return new DominityElement(this.elem.children[e]);
  }
  parent() {
    return new DominityElement(this.elem.parentNode);
  }
  root(e = 'body') {
    let t = this;
    for (; !t.matches(`${e  } > *`); ) {t = t.parent();}
    return t;
  }
  $end() {
    return this.parent();
  }
  next() {
    return new DominityElement(this.elem.nextElementSibling);
  }
  previous() {
    return new DominityElement(this.elem.previousElementSibling);
  }
  clone(e = !0) {
    return new DominityElement(this.elem.cloneNode(e));
  }
  asComponent() {
    return this.cloneContent(
      new DominityElement(this.elem.content.cloneNode(!0)),
    );
  }
  contains(e) {
    return e.dominityElem ? this.elem.contains(e.elem) : this.elem.contains(e);
  }
  matches(e) {
    return typeof e === 'string'
      ? this.elem.matches(e)
      : typeof e === 'object'
        ? e.dominityElem
          ? e === this
          : e === this.elem
        : void 0;
  }
  hide() {
    return this.style('display', 'none'), this;
  }
  show(e = 'block') {
    return this.style('display', e), this;
  }
  toggleHide(e, t) {
    return (
      this.style('display') == 'none'
        ? (this.show(), void 0 != e && e(this))
        : this.style('display') != 'none' &&
          (this.hide(), void 0 != t && t(this)),
      this
    );
  }
  showIf(e, t) {
    const i = this;
    return e instanceof DominityReactive
      ? (e.subscribe((e) => {
          let s = e.value;
          t && (s = t(e.value)), i.showIf(s);
        }),
        e.update(),
        this)
      : (e ? this.show() : this.hide(), this);
  }
  renderIf(e, t, i = $el('body')) {
    const s = this;
    return ((this.storedParent = i), e instanceof DominityReactive)
      ? (e.subscribe((e) => {
          let i = e.value;
          t && (i = t(e.value)), s.renderIf(i);
        }),
        e.update(),
        this)
      : (e ? this.storedParent.addChild(this) : this.remove(), this);
  }
  loops(e, t) {
    const i = this;
    return e instanceof DominityReactive
      ? (e.subscribe((e) => {
          i.html(''),
            e.value.forEach((e, s) => {
              t(e, i, s);
            });
        }),
        e.update(),
        this)
      : (console.error(
          'DominityError: list item for ._elFor has to be a reactive object made with reactable(',
        ),
        this);
  }
  model(e) {
    let t = 'value';
    return (
      this.attr('type') == 'checkbox' && (t = 'checked'),
      e instanceof DominityReactive &&
        (e.subscribe((e) => {
          e.value instanceof Array
            ? e.value.includes(this.elem.name)
              ? (this.elem[t] = !0)
              : (this.elem[t] = !1)
            : (this.elem[t] = e.value);
        }),
        e.update(),
        this.checkFor('input', () => {
          let i = this.value();
          this.attr('type') == 'number' &&
            (i == '' && (i = '0'), (i = parseFloat(i))),
            t == 'checked' &&
              (i =
                e.value instanceof Array
                  ? this.elem.checked
                    ? [...e.value, this.elem.name]
                    : e.value.filter((e) => e != this.elem.name)
                  : Boolean(this.elem.checked)),
            e.set(i);
        })),
      this
    );
  }
  binder(e, t, i = !1) {
    return (
      e instanceof DominityReactive &&
        e.subscribe((e) => {
          t(this, e.value);
        }, i),
      this
    );
  }
  animate(e, t, i = 'linear', s) {
    const l = {};
    return (
      Object.keys(e).forEach((t) => {
        e[t] instanceof Array
          ? ((l[t] = e[t][0]), (e[t] = e[t][1]))
          : (l[t] = this.style(t));
      }),
      (this.elem.animate([l, e], {
        duration: 1e3 * t,
        easing: i,
        fill: 'forwards',
      }).onfinish = () => {
        this.style(e), typeof s === 'function' && s(this);
      }),
      this
    );
  }
  focus(e = !0) {
    return !0 == e ? this.elem.focus() : !1 == e && this.elem.blur(), this;
  }
  click() {
    return this.elem.click(), this;
  }
  scrollTo(e = !0) {
    return this.elem.scrollIntoView(e), this;
  }
  getScrollInfo() {
    return {
      height: this.elem.scrollHeight,
      width: this.elem.scrollWidth,
      x: this.elem.scrollLeft,
      y: this.elem.scrollTop,
    };
  }
  getSizeInfo() {
    return this.elem.getBoundingClientRect();
  }
  fullScreen(e = !0) {
    return (
      !0 == e
        ? this.elem.requestFullScreen
          ? this.elem.requestFullScreen()
          : this.elem.webkitRequestFullscreen
            ? this.elem.webkitRequestFullscreen()
            : this.elem.msRequestFullScreen && this.elem.msRequestFullscreen()
        : this.elem.exitFullScreen
          ? this.elem.exitFullScreen()
          : this.elem.webkitExitFullscreen
            ? this.elem.webkitExitFullscreen()
            : this.elem.msExitFullScreen && this.elem.msExitFullscreen(),
      this
    );
  }
}
function el(e, t = '', i = {}, s = document.body) {
  const l = document.createElement(e);
  s.appendChild(l);
  const r = new DominityElement(l);
  return typeof t === 'object' ? r.attr(t) : r.text(t).attr(i), r;
}
function $el(e) {
  return new DominityElement(e);
}
function $$el(e) {
  const t = [];
  return (
    document.querySelectorAll(e).forEach((e) => {
      t.push(new DominityElement(e));
    }),
    t
  );
}
class DominityReactive {
  constructor(e) {
    (this.value = e),
      (this.subscribers = []),
      (this.name = ''),
      (this.linkLess = []);
  }
  as(e) {
    return (this.name = e), this;
  }
  subscribe(e, t = 'true', i = !1) {
    this.subscribers.push(e), i || this.linkLess.push(e), t && e(this);
  }
  unsubscribe(e) {
    this.subscribers.pop(subscribers.indexOf(e));
  }
  set(e) {
    (this.value = e), this.update();
  }
  get(e = '') {
    return e != '' ? this.value[e] : this.value;
  }
  setProp(e, t) {
    (this.value[e] = t), this.update();
  }
  deriveFrom(e, t) {
    return e instanceof DominityReactive
      ? (e.subscribe(() => {
          this.set(t(e.value));
        }),
        this)
      : e instanceof Array
        ? (e.forEach((e) => {
            e.subscribe(() => {
              this.set(t(e.value));
            });
          }),
          this)
        : void 0;
  }
  link(e, t, i) {
    e.subscribe(() => {
      this.linkMsg(i(e.value));
    }, !0);
    const s = (i) => {
      e.linkMsg(t(i.value));
    };
    return this.subscribe(s, !1, !0), this;
  }
  linkMsg(e) {
    (this.value = e), this.update('linkLess');
  }
  update(e = 'subscribers') {
    this[e].forEach((e) => {
      e(this);
    });
  }
}
function reactable(e) {
  return new DominityReactive(e);
}
class DominityRouter {
  constructor(e) {
    (this.path = this.getPath()),
      (this.defaultPath = ''),
      (this.defaultFile = '/index.html'),
      (this.routes = []),
      (this.firstLoad = 0),
      (this.params = {}),
      (this.parentLayout = e || el('div', { id: 'router-content' })),
      (this.backHandler = async () => {
        this.firstLoad && this.getPath() != this.defaultFile
          ? await this.handleRoute()
          : (this.replaceRoute(this.defaultPath), (this.firstLoad = 1));
      }),
      addEventListener('popstate', this.backHandler),
      addEventListener('load', this.backHandler);
  }
  register(e, t, i = () => {}) {
    const s = {
      route: e,
      elem: t,
      callback: i,
      routeKey: reactable(!1),
      element: { remove() {} },
    };
    return (
      this.routes.push(s),
      s.routeKey.subscribe((e) => {
        !0 == e.value
          ? this.parentLayout._el(
              (() => {
                const e = s.elem(this);
                return (s.element = e), e;
              })(),
            )
          : s.element.remove();
      }, !1),
      this
    );
  }
  getPath() {
    return window.location.pathname;
  }
  async handleRoute() {
    let e = 0;
    this.routes.forEach((t) => {
      this.getPath() == t.route
        ? (t.routeKey.set(!0), (e = 1))
        : t.routeKey.set(!1);
    });
  }
  routeTo(e) {
    history.pushState(null, '', e), this.handleRoute();
  }
  replaceRoute(e) {
    history.replaceState(null, '', e), this.handleRoute();
  }
  getQueries() {
    return Object.fromEntries(
      new URLSearchParams(window.location.search).entries(),
    );
  }
  Link(e, t, i = !1) {
    return el('a', e, { tabindex: 0, href: t }).onClick((e, s) => {
      s.preventDefault(), i ? this.replaceRoute(t) : this.routeTo(t);
    });
  }
}
