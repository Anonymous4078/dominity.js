const x = function (z) {
    return new w(z);
  },
  c = function (z) {
    return new V(z);
  },
  i = function (z) {
    const J = [];
    return (
      document.querySelectorAll(z).forEach((Q) => {
        J.push(new V(Q));
      }),
      J
    );
  };
function d(z) {
  return function (J) {
    return import(z).then((Q) => Q.default(J));
  };
}
let M = function () {
    A++;
  },
  h = function () {
    if (A > 1) {
      A--;
      return;
    }
    let z,
      J = !1;
    while (B !== void 0) {
      let Q = B;
      (B = void 0), T++;
      while (Q !== void 0) {
        const X = Q._nextBatchedEffect;
        if (
          ((Q._nextBatchedEffect = void 0),
          (Q._flags &= ~K),
          !(Q._flags & j) && S(Q))
        ) {
          try {
            Q._callback();
          } catch (W) {
            if (!J) {
              (z = W), (J = !0);
            }
          }
        }
        Q = X;
      }
    }
    if (((T = 0), A--, J)) {
      throw z;
    }
  },
  I = function (z) {
    if (Z === void 0) {
      return;
    }
    let J = z._node;
    if (J === void 0 || J._target !== Z) {
      if (
        ((J = {
          _version: 0,
          _source: z,
          _prevSource: Z._sources,
          _nextSource: void 0,
          _target: Z,
          _prevTarget: void 0,
          _nextTarget: void 0,
          _rollbackNode: J,
        }),
        Z._sources !== void 0)
      ) {
        Z._sources._nextSource = J;
      }
      if (((Z._sources = J), (z._node = J), Z._flags & P)) {
        z._subscribe(J);
      }
      return J;
    } else if (J._version === -1) {
      if (((J._version = 0), J._nextSource !== void 0)) {
        if (
          ((J._nextSource._prevSource = J._prevSource),
          J._prevSource !== void 0)
        ) {
          J._prevSource._nextSource = J._nextSource;
        }
        (J._prevSource = Z._sources),
          (J._nextSource = void 0),
          (Z._sources._nextSource = J),
          (Z._sources = J);
      }
      return J;
    }
  },
  w = function (z) {
    (this._value = z),
      (this._version = 0),
      (this._node = void 0),
      (this._targets = void 0);
  },
  S = function (z) {
    for (let J = z._sources; J !== void 0; J = J._nextSource) {
      if (
        J._source._version !== J._version ||
        !J._source._refresh() ||
        J._source._version !== J._version
      ) {
        return !0;
      }
    }
    return !1;
  },
  b = function (z) {
    for (let J = z._sources; J !== void 0; J = J._nextSource) {
      const Q = J._source._node;
      if (Q !== void 0) {
        J._rollbackNode = Q;
      }
      if (
        ((J._source._node = J), (J._version = -1), J._nextSource === void 0)
      ) {
        z._sources = J;
        break;
      }
    }
  },
  k = function (z) {
    let J = z._sources,
      Q = void 0;
    while (J !== void 0) {
      const X = J._prevSource;
      if (J._version === -1) {
        if ((J._source._unsubscribe(J), X !== void 0)) {
          X._nextSource = J._nextSource;
        }
        if (J._nextSource !== void 0) {
          J._nextSource._prevSource = X;
        }
      } else {
        Q = J;
      }
      if (((J._source._node = J._rollbackNode), J._rollbackNode !== void 0)) {
        J._rollbackNode = void 0;
      }
      J = X;
    }
    z._sources = Q;
  },
  _ = function (z) {
    w.call(this, void 0),
      (this._fn = z),
      (this._sources = void 0),
      (this._globalVersion = O - 1),
      (this._flags = q);
  },
  D = function (z) {
    return new _(z);
  },
  N = function (z) {
    const J = z._cleanup;
    if (((z._cleanup = void 0), typeof J === 'function')) {
      M();
      const Q = Z;
      Z = void 0;
      try {
        J();
      } catch (X) {
        throw ((z._flags &= ~H), (z._flags |= j), R(z), X);
      } finally {
        (Z = Q), h();
      }
    }
  },
  R = function (z) {
    for (let J = z._sources; J !== void 0; J = J._nextSource) {
      J._source._unsubscribe(J);
    }
    (z._fn = void 0), (z._sources = void 0), N(z);
  },
  y = function (z) {
    if (Z !== this) {
      throw new Error('Out-of-order effect');
    }
    if ((k(this), (Z = z), (this._flags &= ~H), this._flags & j)) {
      R(this);
    }
    h();
  },
  U = function (z) {
    (this._fn = z),
      (this._cleanup = void 0),
      (this._sources = void 0),
      (this._nextBatchedEffect = void 0),
      (this._flags = P);
  },
  C = function (z) {
    const J = new U(z);
    try {
      J._callback();
    } catch (Q) {
      throw (J._dispose(), Q);
    }
    return J._dispose.bind(J);
  },
  m = Symbol.for('preact-signals'),
  H = 1,
  K = 2,
  q = 4,
  j = 8,
  G = 16,
  P = 32,
  Z = void 0,
  B = void 0,
  A = 0,
  T = 0,
  O = 0;
w.prototype.brand = m;
w.prototype._refresh = function () {
  return !0;
};
w.prototype._subscribe = function (z) {
  if (this._targets !== z && z._prevTarget === void 0) {
    if (((z._nextTarget = this._targets), this._targets !== void 0)) {
      this._targets._prevTarget = z;
    }
    this._targets = z;
  }
};
w.prototype._unsubscribe = function (z) {
  if (this._targets !== void 0) {
    const { _prevTarget: J, _nextTarget: Q } = z;
    if (J !== void 0) {
      (J._nextTarget = Q), (z._prevTarget = void 0);
    }
    if (Q !== void 0) {
      (Q._prevTarget = J), (z._nextTarget = void 0);
    }
    if (z === this._targets) {
      this._targets = Q;
    }
  }
};
w.prototype.subscribe = function (z) {
  return C(() => {
    const J = this.value,
      Q = Z;
    Z = void 0;
    try {
      z(J);
    } finally {
      Z = Q;
    }
  });
};
w.prototype.valueOf = function () {
  return this.value;
};
w.prototype.toString = function () {
  return `${this.value}`;
};
w.prototype.toJSON = function () {
  return this.value;
};
w.prototype.peek = function () {
  const z = Z;
  Z = void 0;
  try {
    return this.value;
  } finally {
    Z = z;
  }
};
Object.defineProperty(w.prototype, 'value', {
  get() {
    const z = I(this);
    if (z !== void 0) {
      z._version = this._version;
    }
    return this._value;
  },
  set(z) {
    if (z !== this._value) {
      if (T > 100) {
        throw new Error('Cycle detected');
      }
      (this._value = z), this._version++, O++, M();
      try {
        for (let J = this._targets; J !== void 0; J = J._nextTarget) {
          J._target._notify();
        }
      } finally {
        h();
      }
    }
  },
});
_.prototype = new w();
_.prototype._refresh = function () {
  if (((this._flags &= ~K), this._flags & H)) {
    return !1;
  }
  if ((this._flags & (q | P)) === P) {
    return !0;
  }
  if (((this._flags &= ~q), this._globalVersion === O)) {
    return !0;
  }
  if (
    ((this._globalVersion = O),
    (this._flags |= H),
    this._version > 0 && !S(this))
  ) {
    return (this._flags &= ~H), !0;
  }
  const z = Z;
  try {
    b(this), (Z = this);
    const J = this._fn();
    if (this._flags & G || this._value !== J || this._version === 0) {
      (this._value = J), (this._flags &= ~G), this._version++;
    }
  } catch (J) {
    (this._value = J), (this._flags |= G), this._version++;
  }
  return (Z = z), k(this), (this._flags &= ~H), !0;
};
_.prototype._subscribe = function (z) {
  if (this._targets === void 0) {
    this._flags |= q | P;
    for (let J = this._sources; J !== void 0; J = J._nextSource) {
      J._source._subscribe(J);
    }
  }
  w.prototype._subscribe.call(this, z);
};
_.prototype._unsubscribe = function (z) {
  if (this._targets !== void 0) {
    if ((w.prototype._unsubscribe.call(this, z), this._targets === void 0)) {
      this._flags &= ~P;
      for (let J = this._sources; J !== void 0; J = J._nextSource) {
        J._source._unsubscribe(J);
      }
    }
  }
};
_.prototype._notify = function () {
  if (!(this._flags & K)) {
    this._flags |= q | K;
    for (let z = this._targets; z !== void 0; z = z._nextTarget) {
      z._target._notify();
    }
  }
};
Object.defineProperty(_.prototype, 'value', {
  get() {
    if (this._flags & H) {
      throw new Error('Cycle detected');
    }
    const z = I(this);
    if ((this._refresh(), z !== void 0)) {
      z._version = this._version;
    }
    if (this._flags & G) {
      throw this._value;
    }
    return this._value;
  },
});
U.prototype._callback = function () {
  const z = this._start();
  try {
    if (this._flags & j) {
      return;
    }
    if (this._fn === void 0) {
      return;
    }
    const J = this._fn();
    if (typeof J === 'function') {
      this._cleanup = J;
    }
  } finally {
    z();
  }
};
U.prototype._start = function () {
  if (this._flags & H) {
    throw new Error('Cycle detected');
  }
  (this._flags |= H), (this._flags &= ~j), N(this), b(this), M();
  const z = Z;
  return (Z = this), y.bind(this, z);
};
U.prototype._notify = function () {
  if (!(this._flags & K)) {
    (this._flags |= K), (this._nextBatchedEffect = B), (B = this);
  }
};
U.prototype._dispose = function () {
  if (((this._flags |= j), !(this._flags & H))) {
    R(this);
  }
};
var E = function (z, ...J) {
    const Q = document.createElement(z),
      X = new V(Q);
    return (
      J.forEach((W, L) => {
        if (typeof W === 'string') {
          const Y = document.createTextNode(W);
          Q.appendChild(Y);
        } else if (typeof W === 'function' && typeof W() === 'string') {
          const Y = document.createTextNode(W());
          $(() => {
            Y.data = W();
          }),
            Q.appendChild(Y);
        } else if (W instanceof F) {
          const Y = document.createTextNode(W.value);
          Q.appendChild(Y),
            $(() => {
              Y.data = W.value;
            });
        } else if (W instanceof V) {
          Q.appendChild(W.elem);
        } else if (
          typeof W === 'object' ||
          (typeof W === 'function' && typeof W() === 'object')
        ) {
          X.attr(W);
        } else if (W instanceof Array) {
          W.forEach((Y) => {
            if (Y instanceof V) {
              Q.appendChild(Y.elem);
            } else {
              throw new Error(
                'Dominity Error: invalid element type passed in as array ,all elements of the array should be of type DominityElement',
              );
            }
          });
        } else {
          throw new Error(
            `Dominity Error: invalid type ${typeof W} passed in as argument to dominity builder function`,
          );
        }
      }),
      X
    );
  },
  $ = C,
  u = x,
  f = D,
  F = w;
class V {
  constructor(z) {
    if (typeof z === 'string') {
      this.elem = document.querySelector(z);
    } else {
      this.elem = z;
    }
    if (this.elem == null) {
      console.error(`DominityError: element of query '${z}'  NOT  FOUND `);
    }
  }
  html(z) {
    if (z == null) {
      return this.elem.innerHTML;
    }

    if (typeof z === 'function') {
      $(() => {
        this.html(z());
      });
    } else {
      this.elem.innerHTML = z;
    }
    return this;
  }
  css(z, J = void 0) {
    if (typeof z === 'string') {
      if (J == null) {
        return window.getComputedStyle(this.elem, null).getPropertyValue(z);
      }
      return (this.elem.style[z] = J), this;
    } else if (typeof z === 'object') {
      return Object.assign(this.elem.style, z), this;
    } else if (typeof z === 'function') {
      return (
        $(() => {
          this.css(z());
        }),
        this
      );
    }
  }
  attr(z, J = void 0) {
    if (typeof z === 'string') {
      if (J == null) {
        return this.elem.getAttribute(z);
      }
      return this.elem.setAttribute(z, J), this;
    } else if (typeof z === 'object') {
      const Q = Object.keys(z),
        X = Object.values(z);
      return (
        Q.forEach((W, L) => {
          if (X[L] instanceof F) {
            $(() => {
              this.attr(W, X[L].value);
            });
          } else if (typeof X[L] !== 'function') {
            this.attr(W, X[L]);
          } else if (typeof X[L] === 'function') {
            $(() => {
              this.attr(W, X[L]());
            });
          }
        }),
        this
      );
    }
  }
  on(z, J, Q = !1) {
    return this.elem.addEventListener(z, J, Q), this;
  }
  remove() {
    return this.elem.remove(), this;
  }
  showIf(z) {
    const J = this.css('display') != 'none' ? this.css('display') : 'block';
    if (typeof z === 'function') {
      return (
        $(() => {
          this.showIf(z());
        }),
        this
      );
    } else if (z instanceof F) {
      $(() => {
        this.showIf(z.value);
      });
    } else if (z) {
      this.elem.style.display = J;
    } else {
      this.elem.style.display = 'none';
    }
    return this;
  }
  forEvery(z, J) {
    const Q = this;
    if (z instanceof F) {
      return (
        $(() => {
          (Q.elem.innerHTML = ''),
            z.value.forEach((X, W) => {
              J(X, Q, W).addTo(this);
            });
        }),
        this
      );
    }
    return (
      console.error(
        'DominityError: list item for ._elFor has to be a reactive object made with rst() and iterable',
      ),
      this
    );
  }
  withRef(z) {
    return z(this.elem, this), this;
  }
  giveRef(z, J = !0) {
    if (z instanceof F) {
      z.value = J ? this.elem : this;
    } else {
      z = J ? this.elem : this;
    }
    return this;
  }
  model(z, J) {
    let Q = 'value';
    if (this.attr('type') == 'checkbox') {
      Q = 'checked';
    }
    if (z instanceof F) {
      if (J?.debounce == null && J?.throttle == null) {
        $(() => {
          if (!(z.value instanceof Array)) {
            this.elem[Q] = z.value;
          } else if (z.value.includes(this.elem.name)) {
            this.elem[Q] = !0;
          } else {
            this.elem[Q] = !1;
          }
        });
      } else {
        this.elem[Q] = z.value;
      }
      let W = 0,
        X;
      this.on('input', () => {
        let L = this.elem.value;
        if (this.attr('type') == 'number') {
          if (L == '') {
            L = '0';
          }
          L = parseFloat(L);
        }
        if (Q == 'checked') {
          if (!(z.value instanceof Array)) {
            if (this.elem.checked) {
              L = !0;
            } else {
              L = !1;
            }
          } else if (this.elem.checked) {
            L = [...z.value, this.elem.name];
          } else {
            L = z.value.filter((Y) => Y != this.elem.name);
          }
        }
        if (J?.debounce == null && J?.throttle == null) {
          z.value = L;
        } else if (J?.debounce) {
          clearTimeout(X),
            (X = setTimeout(() => {
              z.value = L;
            }, J?.debounce));
        } else if (J?.throttle) {
          const Y = new Date().getTime();
          if (Y - W < J?.throttle) {
            return;
          }
          (W = Y), (z.value = L);
        }
      });
    }
    return this;
  }
  animate(z, J, Q = 'linear', X = void 0) {
    const W = {};
    Object.keys(z).forEach((Y) => {
      if (z[Y] instanceof Array) {
        (W[Y] = z[Y][0]), (z[Y] = z[Y][1]);
      } else {
        W[Y] = this.css(Y);
      }
    });
    const L = this.elem.animate([W, z], {
      duration: J * 1000,
      easing: Q,
      fill: 'forwards',
    });
    return (
      (L.onfinish = () => {
        if ((this.css(z), typeof X === 'function')) {
          X(this);
        }
      }),
      this
    );
  }
}
class v {
  constructor() {
    (this.routeMap = {}), (this.defaultPath = void 0);
  }
  setRoutes(z = {}) {
    Object.keys(z).forEach((J) => {
      const Q = {},
        X = z[J];
      if (
        ((Q.viewKey = u(X.isDefault != null && X.isDefault)),
        X.isDefault != null && X.isDefault)
      ) {
        this.defaultPath = J;
      }
      if (z[J].component instanceof V) {
        z[J].component.showIf(Q.viewKey);
      }
      if (
        z[J].getComponent != null &&
        typeof z[J].getComponent === 'function'
      ) {
        $(async () => {
          if (Q.viewKey.value) {
            let W = await z[J].getComponent(this);
            if (z[J].layout != null) {
              W = z[J].layout(W);
            }
            this.root.appendChild(
              W.withRef((L) => {
                $(() => {
                  if (((z[J].componentLoaded = L), z[J].onLoad != null)) {
                    z[J].onLoad(L);
                  }
                  if (this.onLoad != null) {
                    this.onLoad();
                  }
                });
              }).elem,
            );
          } else if (z[J].componentLoaded) {
            z[J].componentLoaded.remove();
          }
        });
      }
      this.routeMap[J] = Q;
    });
  }
  start(z) {
    (this.root = z),
      addEventListener('popstate', () => {
        setTimeout(() => {
          this.assignRoute();
        }, 100);
      }),
      addEventListener('load', async () => {
        setTimeout(() => {
          if (
            window.location.pathname == '/' ||
            window.location.pathname == this.defaultAltPath
          ) {
            this.routeTo(this.defaultPath);
          } else {
            this.assignRoute();
          }
        }, 200);
      }),
      this.assignRoute();
  }
  async assignRoute() {
    Object.keys(this.routeMap).forEach((z) => {
      const J = this.routeMap[z];
      if (window.location.pathname == z) {
        J.viewKey.value = !0;
      } else {
        J.viewKey.value = !1;
      }
    });
  }
  routeTo(z) {
    history.pushState(null, '', z), this.assignRoute();
  }
  replaceRoute(z) {
    history.replaceState(null, '', z), this.assignRoute();
  }
  revalidateRoute() {
    history.go(0), this.assignRoute();
  }
  Link({ href: z, replace: J, ...Q }, ...X) {
    return E('a', { ...Q }, ...X).on('click', (W) => {
      if ((W.preventDefault(), J != null)) {
        this.replaceRoute(W.target.getAttribute('href'));
      } else {
        this.routeTo(z);
      }
    });
  }
  get queries() {
    return Object.fromEntries(
      new URLSearchParams(window.location.search).entries(),
    );
  }
}
const g = [
    'a',
    'abbr',
    'address',
    'area',
    'article',
    'aside',
    'audio',
    'b',
    'base',
    'bdi',
    'bdo',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'embed',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'link',
    'main',
    'map',
    'mark',
    'meta',
    'meter',
    'nav',
    'noscript',
    'object',
    'ol',
    'optgroup',
    'option',
    'output',
    'p',
    'param',
    'picture',
    'pre',
    'progress',
    'q',
    'rb',
    'rp',
    'rt',
    'rtc',
    's',
    'samp',
    'script',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'style',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'template',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'u',
    'ul',
    'var',
    'video',
    'wbr',
    'slot',
  ],
  s = g.reduce(
    (z, J) => (
      (z[J] = (...Q) => {
        const X = E(J, ...Q);
        return z.root.appendChild(X.elem), X;
      }),
      z
    ),
    { root: document.body },
  ),
  {
    a: l,
    abbr: p,
    address: n,
    area: r,
    article: a,
    aside: o,
    audio: t,
    b: e,
    base: zz,
    bdi: Jz,
    bdo: Qz,
    blockquote: Wz,
    body: Xz,
    br: Zz,
    button: Lz,
    canvas: Yz,
    caption: wz,
    cite: $z,
    code: Hz,
    col: Vz,
    colgroup: _z,
    data: Fz,
    datalist: Kz,
    dd: Pz,
    del: jz,
    details: Bz,
    dfn: qz,
    dialog: Uz,
    div: Gz,
    dl: Az,
    dt: Oz,
    em: Tz,
    embed: Mz,
    fieldset: hz,
    figcaption: Rz,
    figure: Iz,
    footer: Sz,
    form: bz,
    h1: kz,
    h2: Nz,
    h3: Cz,
    h4: Ez,
    h5: xz,
    h6: Dz,
    header: yz,
    hr: mz,
    html: uz,
    i: vz,
    iframe: gz,
    img: sz,
    input: cz,
    ins: iz,
    kbd: fz,
    label: dz,
    legend: lz,
    li: pz,
    link: nz,
    main: rz,
    map: az,
    mark: oz,
    meta: tz,
    meter: ez,
    nav: zJ,
    noscript: JJ,
    object: QJ,
    ol: WJ,
    optgroup: XJ,
    option: ZJ,
    output: LJ,
    p: YJ,
    param: wJ,
    picture: $J,
    pre: HJ,
    progress: VJ,
    q: _J,
    rb: FJ,
    rp: KJ,
    rt: PJ,
    rtc: jJ,
    s: BJ,
    samp: qJ,
    script: UJ,
    section: GJ,
    select: AJ,
    small: OJ,
    source: TJ,
    span: MJ,
    strong: hJ,
    style: RJ,
    sub: IJ,
    summary: SJ,
    sup: bJ,
    table: kJ,
    tbody: NJ,
    td: CJ,
    template: EJ,
    textarea: xJ,
    tfoot: DJ,
    th: yJ,
    thead: mJ,
    time: uJ,
    title: vJ,
    tr: gJ,
    u: sJ,
    ul: cJ,
    video: iJ,
    wbr: fJ,
    slot: dJ,
  } = s;
export {
  fJ as wbr,
  iJ as video,
  cJ as ul,
  sJ as u,
  gJ as tr,
  vJ as title,
  uJ as time,
  mJ as thead,
  yJ as th,
  DJ as tfoot,
  xJ as textarea,
  EJ as template,
  CJ as td,
  NJ as tbody,
  kJ as table,
  bJ as sup,
  SJ as summary,
  IJ as sub,
  RJ as style,
  hJ as strong,
  u as state,
  MJ as span,
  TJ as source,
  OJ as small,
  dJ as slot,
  AJ as select,
  GJ as section,
  UJ as script,
  qJ as samp,
  BJ as s,
  jJ as rtc,
  PJ as rt,
  KJ as rp,
  FJ as rb,
  _J as q,
  VJ as progress,
  HJ as pre,
  $J as picture,
  wJ as param,
  YJ as p,
  LJ as output,
  ZJ as option,
  XJ as optgroup,
  WJ as ol,
  QJ as object,
  JJ as noscript,
  zJ as nav,
  ez as meter,
  tz as meta,
  oz as mark,
  az as map,
  rz as main,
  nz as link,
  pz as li,
  lz as legend,
  d as lazy,
  dz as label,
  fz as kbd,
  iz as ins,
  cz as input,
  sz as img,
  gz as iframe,
  vz as i,
  uz as html,
  mz as hr,
  yz as header,
  Dz as h6,
  xz as h5,
  Ez as h4,
  Cz as h3,
  Nz as h2,
  kz as h1,
  bz as form,
  Sz as footer,
  Iz as figure,
  Rz as figcaption,
  hz as fieldset,
  Mz as embed,
  Tz as em,
  $ as effect,
  Oz as dt,
  Az as dl,
  Gz as div,
  Uz as dialog,
  qz as dfn,
  Bz as details,
  f as derived,
  jz as del,
  Pz as dd,
  Kz as datalist,
  Fz as data,
  _z as colgroup,
  Vz as col,
  Hz as code,
  $z as cite,
  wz as caption,
  Yz as canvas,
  Lz as button,
  Zz as br,
  Xz as body,
  Wz as blockquote,
  Qz as bdo,
  Jz as bdi,
  zz as base,
  e as b,
  t as audio,
  o as aside,
  a as article,
  r as area,
  n as address,
  p as abbr,
  l as a,
  v as DominityRouter,
  F as DominityReactive,
  c as $el,
  i as $$el,
};
